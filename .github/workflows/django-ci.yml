name: Django CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      max-parallel: 4
      matrix:
        python-version: ['3.10', '3.11', '3.12']

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_djangomailer
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      POSTGRES_DB: test_djangomailer
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_HOST: localhost
      POSTGRES_PORT: 5432
      DJANGO_SETTINGS_MODULE: djangoMailer.settings
      SECRET_KEY: test-secret-key-for-ci

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install coverage flake8 bandit safety pytest pytest-django pytest-cov

    - name: Run Linting (flake8)
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics --exclude=migrations,venv,env

    - name: Run Security Checks (Bandit)
      run: |
        bandit -r . -ll -x */tests.py,*/test_*.py,*/migrations/*,./venv/*,./env/*
      continue-on-error: true

    - name: Check for Dependency Vulnerabilities (Safety)
      run: |
        safety check --json || true
      continue-on-error: true

    - name: Check for Missing Migrations
      run: |
        python manage.py makemigrations --check --dry-run --no-input

    - name: Run Migrations
      run: |
        python manage.py migrate --no-input

    - name: Run Tests with Coverage
      run: |
        coverage run --source='.' manage.py test
        coverage report
        coverage xml

    - name: Upload Coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
      continue-on-error: true

    - name: Check Static Files Collection
      run: |
        python manage.py collectstatic --no-input --dry-run
      env:
        STATIC_ROOT: /tmp/static

  code-quality:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        cache: 'pip'

    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black isort

    - name: Check Code Formatting (Black)
      run: |
        black --check --diff .
      continue-on-error: true

    - name: Check Import Sorting (isort)
      run: |
        isort --check-only --diff .
      continue-on-error: true

  build:
    runs-on: ubuntu-latest
    needs: [test, code-quality]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Check Django Configuration
      run: |
        python manage.py check --deploy
      env:
        SECRET_KEY: test-secret-key-for-ci
        POSTGRES_DB: test
        POSTGRES_USER: test
        POSTGRES_PASSWORD: test
        POSTGRES_HOST: localhost
        POSTGRES_PORT: 5432
      continue-on-error: true

    - name: Build Success
      run: echo "Build completed successfully!"
